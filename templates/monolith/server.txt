import App from "./app";
import * as process from "process";

import * as bodyParser from "body-parser";
import loggerMiddleware from "./middleware/logger";

import * as dotenv from "dotenv";
import * as customenv from "custom-env";
import "reflect-metadata";
import { createConnection } from "typeorm";


restimports

dotenv.config();
const ENV = process.env.profile;
customenv.env(ENV);
console.log("/**************************/");
console.log(`/DATA BASE CONFIG - ${ENV.toUpperCase()}/`);

var flagBuild: boolean = __dirname.includes("src");
var stringEntities = flagBuild ? "src/entity/**/*.ts" : "dist/entity/**/*.js";
var databaseconfig: any = {
  type: process.env.CONNTYPE,
  host: process.env.CONNHOST,
  schema: process.env.CONNSHEMA,
  synchronize: process.env.CONNSYNC === "true",
  port: parseInt(process.env.CONNPORT),
  username: process.env.CONNUSER,
  password: process.env.CONNPW,
  database: process.env.CONNDB,
  encrypt: true,
  connectTimeoutMS: 100000,
  entities: [stringEntities],
};

console.log(databaseconfig);
console.log("/**************************/");
createConnection(databaseconfig)
  .then(async (connection) => {
    console.log("/CONNECTION SUCCESS/");
    const app = new App({
      port: parseInt(process.env.PORT) || 5000,
      controllers: [
          arrayinstances
      ],
      middleWares: [
        bodyParser.json(),
        bodyParser.urlencoded({ extended: true }),
        loggerMiddleware,
      ],
      jobs: [],
    });
    app.listen();
    console.log("/**************************/");
  })
  .catch((error) => {
    console.log("/**************************/");
    console.log("/CONNECTION ERROR/");
    console.log("/--------INFO--------/");
    console.log(error);
    console.log("/**************************/");
  });
