import { ModelGeneratorDto } from "./utilities/dto/ModelGeneratorDto";
import { executeCMD } from "./utilities/command.exec";
const enviromentConfig = {
  activeprofile: "dev",
  generator: {
    proyectName: "demo_proyect_security",
    monolith: {
      audit: true,
      security: true,
      roles: ["ADMIN", "SYS_ADMIN"],
    },
    audit: {
      updateColumns: [
        {
          columnName: "updater",
          columnType: "varchar",
          propertyName: "updater",
          length: "100",
          isAutoGenerated: false,
          isNull: true,
        },
        {
          columnName: "date_updated",
          columnType: "timestamp",
          propertyName: "dateUpdated",
          isAutoGenerated: true,
          isNull: true,
        },
        {
          columnName: "other",
          columnType: "varchar",
          propertyName: "other",
          length: "100",
          isAutoGenerated: false,
          isNull: true,
        },
      ],
      createColumns: [
        {
          columnName: "fecha_creacion",
          columnType: "timestamp",
          propertyName: "fechaCreacion",
          isAutoGenerated: true,
          isNull: true,
        },
        {
          columnName: "other_atribute",
          columnType: "varchar",
          propertyName: "otherAtribute",
          length: "70",
          isAutoGenerated: false,
          isNull: true,
        },
      ],
    },
    lambda: false,
    commnads: {
      models: (params: ModelGeneratorDto): Promise<any> => {
        var cmd = `((rm -r models/ || true) && typeorm-model-generator -o './models' -h ${params.host} -p ${params.port} -d ${params.db} -u ${params.user} -x ${params.password} -s ${params.schema} -e ${params.type})`;
        return executeCMD(cmd);
      },
    },
  },
  generator2: {
    proyectName: "demo_proyect",
    audit: {
      active: true,
      updateColumns: [
        {
          columnName: "updater",
          columnType: "varchar",
          propertyName: "updater",
          length: "100",
          isAutoGenerated: false,
          isNull: true,
        },
        {
          columnName: "date_updated",
          columnType: "timestamp",
          propertyName: "dateUpdated",
          isAutoGenerated: true,
          isNull: true,
        },
      ],
      createColumns: [
        {
          columnName: "fecha_creacion",
          columnType: "timestamp",
          propertyName: "fechaCreacion",
          isAutoGenerated: true,
          isNull: true,
        },
        {
          columnName: "other_atribute",
          columnType: "varchar",
          propertyName: "otherAtribute",
          length: "70",
          isAutoGenerated: false,
          isNull: true,
        },
      ],
    },
    monolith: {
      active: true,
      audit: true,
      security: true,
      roles: ["ADMIN", "SYS_ADMIN"],
    },
    lambda: {
      active: true,
    },
    commnads: {
      models: (params: ModelGeneratorDto): Promise<any> => {
        var cmd = `((rm -r models/ || true) && typeorm-model-generator -o './models' -h ${params.host} -p ${params.port} -d ${params.db} -u ${params.user} -x ${params.password} -s ${params.schema} -e ${params.type})`;
        return executeCMD(cmd);
      },
    },
  },
  dev: {
    dbconfig: {
      type: "postgres",
      host: "localhost",
      schema: "v4",
      synchronize: false,
      port: 5432,
      username: "postgres",
      password: "root",
      database: "abastctv3",
      encrypt: true,
      connectTimeoutMS: 60000,
      entities: ["src/entity/**/*.ts"],
    },
    security: {
      rounds: 2,
      secret: "secret",
      expiresIn: 86400,
    },
  },
  local_open2: {
    dbconfig: {
      type: "postgres",
      host: "localhost",
      schema: "iprovider",
      synchronize: false,
      port: 5432,
      username: "postgres",
      password: "root",
      database: "abastctv3",
      encrypt: true,
      connectTimeoutMS: 60000,
      entities: ["src/entity/**/*.ts"],
    },
    security: {
      active: false,
      rounds: 2,
      secret: "secret",
      expiresIn: 86400,
    },
    lambda: {
      region: "us-east-2",
      memorySize: "512",
      timeout: "250",
      layerName: "iProviderV2",
      layerArn: "arn:aws:lambda:us-east-2:432499991508:layer:iProviderV2_dev",
      layerVersion: "3",
      roleArn: "arn:aws:iam::432499991508:role/lambda_role",
      apigatewayCrud: {
        id: "r8cr4lzk0c",
        name: "iprovider_saas",
        createdDate: "2021-04-05T16:46:21-05:00",
        apiKeySource: "HEADER",
        endpointConfiguration: {
          types: ["EDGE"],
        },
      },
      apigatewayCrudRoot: "eg037f4hj3",
      apigatewayBusiness: {
        id: "fiwncq8vfi",
        name: "iprovider_business",
        createdDate: "2021-08-05T18:43:39-05:00",
        apiKeySource: "HEADER",
        endpointConfiguration: {
          types: ["REGIONAL"],
        },
      },
      apigatewayRootBusiness: "ntv97vtqs7",
    },
  },
};

export default enviromentConfig;
