import { ModelGeneratorDto } from "./utilities/dto/ModelGeneratorDto";
import { executeCMD } from "./utilities/command.exec";
const enviromentConfig = {
  activeprofile: "local",
  generator: {
    proyectName: "<PROYECT_NAME>",
    audit: {
      active: true,
      updateColumns: [
        {
          columnName: "usuario_actualizador",
          columnType: "varchar",
          propertyName: "usuarioActualizador",
          length: "100",
          isAutoGenerated: false,
          isNull: true,
        },
        {
          columnName: "fecha_actualizacion",
          columnType: "timestamp",
          propertyName: "fechaActualizacion",
          isAutoGenerated: true,
          isNull: true,
        },
      ],
      createColumns: [
        {
          columnName: "fecha_creacion",
          columnType: "timestamp",
          propertyName: "fechaCreacion",
          isAutoGenerated: true,
          isNull: true,
        },
      ],
    },
    monolith: {
      active: true,
      audit: true,
      security: true,
      roles: ["ADMIN", "SYS_ADMIN"],
    },
    lambda: {
      active: true,
    },
    commnads: {
      models: (params: ModelGeneratorDto): Promise<any> => {
        var cmd = `((rm -r models/ || true) && typeorm-model-generator -o './models' -h ${params.host} -p ${params.port} -d ${params.db} -u ${params.user} -x ${params.password} -s ${params.schema} -e ${params.type})`;
        return executeCMD(cmd);
      },
    },
  },
  local: {
    dbconfig: {
      type: "postgres",
      host: "<HOST>",
      schema: "<SHEMA>",
      synchronize: false,
      port: 1000,
      username: "<USERNAME>",
      password: "<PW>",
      database: "<DATABASE>",
      encrypt: true,
      connectTimeoutMS: 60000,
      entities: ["src/entity/**/*.ts"],
    },
    security: {
      active: false,
      rounds: 2,
      secret: "secrete",
      expiresIn: 86400,
    },
    lambda: {
      memorySize: "250",
      timeout: "250",
      layerArn: "<LAYER ARN>",
      layerVersion: "<LAYER VERSION>",
      roleArn: "<ROLE ARN>",
      apigatewayCrud: "<API GW CRUD JSON>",
      apigatewayCrudRoot: "<API GW ROOT ID>",
      apigatewayBusiness: "<API GW BUSINESS JSON>",
      apigatewayRootBusiness: "<API GW ROOT ID>",
    },
  },
};

export default enviromentConfig;
