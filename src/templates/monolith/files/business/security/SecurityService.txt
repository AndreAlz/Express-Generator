import enviromentConfig from "../../config";
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");

import { SignUpDto } from "../dto/SignUpDto";
import { SignInDto } from "../dto/SignInDto";
import { TokenDataDto } from "../dto/TokenDataDto";
import { getConnection } from "typeorm";
const config = enviromentConfig[enviromentConfig.activeprofile];

import { PersonaService } from "../../service/PersonaService";
import { UsersService } from "../../service/UsersService";
import { UsersRolesService } from "../../service/UsersRolesService";
import { RolesService } from "../../service/RolesService";

import { Persona } from "../../entity/Persona";
import { Users } from "../../entity/Users";
import { UsersRoles } from "../../entity/UsersRoles";
import { Roles } from "../../entity/Roles";

export class SecurityService {
  personaService = new PersonaService();
  usersService = new UsersService();
  usersRolesService = new UsersRolesService();
  rolesService = new RolesService();
  signUp = async (bean: SignUpDto) => {
    try {
      var result = await getConnection().transaction(
        async (transactionalEntityManager) => {
          let persona = new Persona();
          persona.name = bean.nombre;
          persona = await this.personaService.create(
            persona,
            transactionalEntityManager,
          );
          let usuario = new Users();
          usuario.email = bean.email;
          usuario.pw = await this.encryptPassword(bean.password);
          usuario.idPersona = persona;
          usuario = await this.usersService.create(
            usuario,
            transactionalEntityManager,
          );
          let filter = {
            where: [],
          };
          bean.roles.forEach((r) => {
            filter.where.push({
              id: r,
            });
          });
          let roles: Array<Roles> = await this.rolesService.find(filter);
          let userRoles: Array<UsersRoles> = [];
          roles.forEach((r) => {
            var temp: UsersRoles = new UsersRoles();
            temp.idRole = r;
            temp.idUser = usuario;
            userRoles.push(temp);
          });
          userRoles = await this.usersRolesService.createall(
            userRoles,
            transactionalEntityManager,
          );
          let tokenData: TokenDataDto = new TokenDataDto(
            persona.id,
            usuario.id,
            roles,
          );
          let token = await this.generateToken(tokenData);
          return { token, persona };
        },
      );
      return result;
    } catch (e) {
      console.log(e.message);
      throw e;
    }
  };

  signIn = async (bean: SignInDto) => {
    try {
      let usuarioList: Array<Users> = await this.usersService.find({
        where: {
          email: bean.username,
        },
        relations: ["idPersona", "usersRoles", "usersRoles.idRole"],
      });
      if (usuarioList.length > 0) {
        let usuario: Users = usuarioList[0];
        let pwMatched = await this.comparePassword(bean.password, usuario.pw);
        if (pwMatched) {
          delete usuario.pw;
          let rolesList = usuario.usersRoles.map((ur) => {
            return ur.idRole;
          });
          let tokenData: TokenDataDto = new TokenDataDto(
            usuario.idPersona.id,
            usuario.id,
            rolesList,
          );
          let token = await this.generateToken(tokenData);
          return {
            token: token,
            persona: usuario.idPersona,
          };
        } else {
          return null;
        }
      } else {
        return null;
      }
    } catch (e) {
      console.log(e.message);
      throw e;
    }
  };

  encryptPassword = async (password) => {
    const salt = await bcrypt.genSalt(config.security.rounds);
    return await bcrypt.hash(password, salt);
  };

  comparePassword = async (password, receivedPassword) => {
    return await bcrypt.compare(password, receivedPassword);
  };

  generateToken = async (data: TokenDataDto) => {
    return await jwt.sign(
      JSON.parse(JSON.stringify(data)),
      config.security.secret,
      {
        expiresIn: config.security.expiresIn,
      },
    );
  };
}
