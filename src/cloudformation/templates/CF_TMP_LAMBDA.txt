AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: NESTED_NAME Stack
Parameters:
  ENVIR:
    Type: String
    Default: lab
    Description: Enviroment to deploy stack
  AG:
    Type: String
    Description: API GATEWAY
  AGR:
    Type: String
    Description: AG ROOT RESOURCE
  LR:
    Type: String
    Description: IAM ROLE LAMBDA
  LL:
    Type: String
    Description: LAYER LAMBDA
Resources:
  ##RECURSO DEL AG
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AG
      ParentId: !Ref AGR
      PathPart: "NESTED_NAME"
  ##METODO POST
  ApiGatewayMethod: 
    Type: AWS::ApiGateway::Method
    DependsOn: 
    - LambdaFunction
    - ApiGatewayResource
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      RestApiId: !Ref AG
      ResourceId: !Ref ApiGatewayResource
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  ##CORS
  ApiGateWayCorsOption:
    Type: "AWS::ApiGateway::Method"
    DependsOn: 
    - LambdaFunction
    - ApiGatewayResource
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationHttpMethod: POST
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref AG
  ##METODO RESPONSE
  ApiGatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    DependsOn: 
    - LambdaFunction
    - ApiGatewayResource
    Properties:
      ResponseParameters:
        "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref AG
  ##LAMBDA FUNCTION    
  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LAMBDA_NAME
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 512
      Timeout: 250
      CodeUri:
        Bucket: BUCKET_NAME
        Key: BUCKET_FILE_KEY
      Tracing: Active
      Layers:
        - !Ref LL
      Role: !Ref LR
  ##PERMISOS LAMBDA
  LambdaPermission:
      Type: 'AWS::Lambda::Permission'
      DependsOn: 
      - LambdaFunction
      Properties:
        Action: 'lambda:InvokeFunction'
        FunctionName: !GetAtt LambdaFunction.Arn
        Principal: apigateway.amazonaws.com
        SourceArn: !Join [ "", [ 'arn:aws:execute-api:', !Ref 'AWS::Region', ":", !Ref 'AWS::AccountId', ":", !Ref 'AG', "/*/*/*", ] ]
